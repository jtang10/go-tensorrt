// Code generated by "enumer -type=ModelFormat -json -text -yaml -sql"; DO NOT EDIT.

//
package tensorrt

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const (
	_ModelFormatName_0 = "ModelFormatCaffeModelFormatOnnx"
	_ModelFormatName_1 = "ModelFormatUnknown"
)

var (
	_ModelFormatIndex_0 = [...]uint8{0, 16, 31}
	_ModelFormatIndex_1 = [...]uint8{0, 18}
)

func (i ModelFormat) String() string {
	switch {
	case 1 <= i && i <= 2:
		i -= 1
		return _ModelFormatName_0[_ModelFormatIndex_0[i]:_ModelFormatIndex_0[i+1]]
	case i == 999:
		return _ModelFormatName_1
	default:
		return fmt.Sprintf("ModelFormat(%d)", i)
	}
}

var _ModelFormatValues = []ModelFormat{1, 2, 999}

var _ModelFormatNameToValueMap = map[string]ModelFormat{
	_ModelFormatName_0[0:16]:  1,
	_ModelFormatName_0[16:31]: 2,
	_ModelFormatName_1[0:18]:  999,
}

// ModelFormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ModelFormatString(s string) (ModelFormat, error) {
	if val, ok := _ModelFormatNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ModelFormat values", s)
}

// ModelFormatValues returns all values of the enum
func ModelFormatValues() []ModelFormat {
	return _ModelFormatValues
}

// IsAModelFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ModelFormat) IsAModelFormat() bool {
	for _, v := range _ModelFormatValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ModelFormat
func (i ModelFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ModelFormat
func (i *ModelFormat) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ModelFormat should be a string, got %s", data)
	}

	var err error
	*i, err = ModelFormatString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for ModelFormat
func (i ModelFormat) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ModelFormat
func (i *ModelFormat) UnmarshalText(text []byte) error {
	var err error
	*i, err = ModelFormatString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for ModelFormat
func (i ModelFormat) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ModelFormat
func (i *ModelFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ModelFormatString(s)
	return err
}

func (i ModelFormat) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *ModelFormat) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := ModelFormatString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
